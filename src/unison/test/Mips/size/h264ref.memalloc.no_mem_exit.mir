--- |
  ; ModuleID = 'h264ref.memalloc.no_mem_exit.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  @errortext = external global [300 x i8], align 1
  @.str.20 = external hidden unnamed_addr constant [30 x i8], align 1
  
  ; Function Attrs: nounwind
  define void @no_mem_exit(i8* %where) #0 {
    %1 = tail call i32 (i8*, i32, i8*, ...) @snprintf(i8* getelementptr inbounds ([300 x i8], [300 x i8]* @errortext, i32 0, i32 0), i32 signext 300, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.20, i32 0, i32 0), i8* %where) #2
    tail call void @error(i8* getelementptr inbounds ([300 x i8], [300 x i8]* @errortext, i32 0, i32 0), i32 signext 100) #2
    ret void
  }
  
  declare void @error(i8*, i32 signext) #1
  
  ; Function Attrs: nounwind
  declare i32 @snprintf(i8* nocapture, i32 signext, i8* nocapture readonly, ...) #0
  
  attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #2 = { nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}

...
---
name:            no_mem_exit
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: gpr32 }
  - { id: 1, class: gpr32 }
  - { id: 2, class: gpr32 }
  - { id: 3, class: gpr32 }
  - { id: 4, class: gpr32 }
  - { id: 5, class: gpr32 }
  - { id: 6, class: gpr32 }
  - { id: 7, class: gpr32 }
  - { id: 8, class: gpr32 }
  - { id: 9, class: gpr32 }
  - { id: 10, class: gpr32 }
liveins:         
  - { reg: '%a0', virtual-reg: '%0' }
  - { reg: '%t9' }
  - { reg: '%v0' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
body:             |
  bb.0 (%ir-block.0, freq 8):
    liveins: %a0, %t9, %v0
    liveouts:
  
    %1 = ADDu %v0, %t9
    %0 = COPY %a0
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %2 = LW %1, target-flags(<unknown>) @errortext, <0x334ab20> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %3 = LW %1, target-flags(<unknown>) @.str.20, <0x334aa60> = !{!"unison-memory-partition", i32 1} :: (load 4 from got)
    %4 = LW %1, target-flags(<unknown>) @snprintf, <0x334a960> = !{!"unison-memory-partition", i32 2} :: (load 4 from call-entry @snprintf)
    %5 = ADDiu %zero, 300
    %a0 = COPY %2
    %a1 = COPY %5
    %a2 = COPY %3
    %a3 = COPY %0
    %gp = COPY %1
    %t9 = COPY %4
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit %a3, implicit %gp, implicit-def %sp, implicit-def %v0
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %7 = LW %1, target-flags(<unknown>) @error, <0x3352ea0> = !{!"unison-memory-partition", i32 3} :: (load 4 from call-entry @error)
    %8 = ADDiu %zero, 100
    %a0 = COPY %2
    %a1 = COPY %8
    %gp = COPY %1
    %t9 = COPY %7
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %gp, implicit-def %sp
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
    RetRA

...
---
unison-test-target: Mips
unison-test-goal: size
unison-test-expected-cost: 448
unison-test-expected-proven: true
unison-test-expected-has-solution: true
...
